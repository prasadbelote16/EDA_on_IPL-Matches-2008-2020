# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J1HXfIuwHp6LMH5BWHy2Kvl_SLIUvfuN
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

Data=pd.read_csv("IPL Matches 2008-2020.csv")
print(Data)

#Loading Data of First 5 rows
Data.head(5)

#Loading Data of Last 5 rows
Data.tail(5)

#Checking Datatypes
Data.dtypes

#Counting Each Row's Data
Data.count()

#Describing Data
Data.describe()

#Checking Shape(i.e No. of rows and columns) of dataset
Data.shape

#Checking Columns of dataset
Data.columns

#Finding top largest values from a particular column
Data.nlargest(5,'result_margin')

#Finding smallest values from a particular column
Data.nsmallest(5,'result_margin')

#Splitting the data into groups
Data.groupby('city')get_group('Mumbai')

# Renaming the column name
Data=Data.rename(columns={"player_of_match":"Man_of_the_Match"})
Data.head(5)

#Printing Unique values of rows
print(Data['city'].nunique())
print(Data['Man_of_the_Match'].nunique())
print(Data['venue'].nunique())
print(Data['winner'].nunique())

#Printing Count of unique values by considering one particular column
Data['winner'].value_counts()

#Checking For Null Values
print(Data.isnull())

#Counting Total Null Values
print(Data.isnull().sum())

#Droping irrelevent column
Data.drop(['id','umpire1','umpire2'],axis=1)

#Removing Null Values
Data=Data.dropna()

#Checking That is there any null values remain or not
print(Data.isnull().sum())



#**************Graph Plotting********


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

ds=pd.read_csv("IPL Matches 2008-2020.csv")
print(ds)

# Countplot with using seaborn
plt.figure(figsize=(12,8))
sns.countplot(y="toss_winner", data=ds, orient="h", hue="toss_decision")
plt.ylabel("IPL Teams")
plt.xlabel("Toss declaration count")
plt.title("IPL Team toss decision status")
sns.set(style='whitegrid')

# # # # # # # #

# Barplot with using seaborn
winner_teams=dict(ds["winner"].value_counts())
team_name=list(winner_teams.keys())
team_wining_score=list(winner_teams.values())
plt.figure(figsize=(12,8))
sns.barplot(team_wining_score,team_name)
for i in range(0, len(team_name)):
  plt.annotate(team_wining_score[i], (team_wining_score[i],i), color='g',size= 13)
plt.ylabel("IPL Teams")
plt.xlabel("Total winning score")
plt.title("IPL Teams 2008-2020 Winning Status")

# # # # # #

# Pie chart with using matplotlib
player_of_matches=dict(ds['player_of_match'].value_counts().head(10))
plt.figure(figsize=(12,8))
player_name=list(player_of_matches.keys())
player_man_of_MatchesScore=list(player_of_matches.values())
plt.pie(player_man_of_MatchesScore,labels=player_name, textprops={'fontweight':'bold','fontsize':15}, wedgeprops={'linewidth': 3,'edgecolor':'white'}, autopct="%2.1f%%")
plt.title("Top 10 2008-2020 Player of match status")
plt.legend()
plt.show()

# # # # # #

# Scatter with using matplotlib
stadium=dict(ds['venue'].value_counts().head(20))
stadium_name=list(stadium.keys())
total_matches_played_to_stadium=list(stadium.values())
sns.set(style='whitegrid')
plt.figure(figsize=(12,8))
plt.ylabel("IPL Stadiums")
plt.xlabel("Total Play on Stadiums")
plt.title("IPL Teams 2008-2020 Winning Status")
plt.scatter(x =total_matches_played_to_stadium, y =stadium_name);
for i in range(0, len(stadium_name)):
  plt.annotate(total_matches_played_to_stadium[i], (total_matches_played_to_stadium[i],i), color='r',size= 13)

# bar plot with using matplotlib
result=dict(ds['result'].value_counts().head(20))
plt.figure(figsize=(12,8))
plt.ylabel("Result Count")
plt.xlabel("Result Type")
plt.title("IPL 2008-2020 Result Status")
result_x=list(result.keys())
result_y=list(result.values())

for i in range(0, len(result_x)):
  plt.bar(result_x[i],result_y[i], label=result_x[i])  
plt.legend()
